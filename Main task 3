//=====[Libraries]=============================================================

#include "mbed.h"
#include "arm_book_lib.h"
#include "FATFileSystem.h"
#include "SDBlockDevice.h"

#include "fire_alarm.h"
#include "user_interface.h"
#include "date_and_time.h"
#include "temperature_sensor.h"
#include "gas_sensor.h"
#include "display.h"
#include "matrix_keypad.h"

//=====[Declaration of private defines]========================================

#define TEMPERATURE_C_LIMIT_ALARM               25.0
#define EVENT_CONFIRMATION_DISPLAY_TIME_MS      2000

//=====[Declaration of private data types]=====================================

//=====[Declaration and initialization of public global objects]===============

DigitalIn fireAlarmTestButton(BUTTON1);
Timer eventDisplayTimer;
UnbufferedSerial uart(USBTX, USBRX);
SDBlockDevice sd(SPI_MOSI, SPI_MISO, SPI_SCK, SPI_CS);
FATFileSystem fs("fs");

//=====[Declaration of external public global variables]=======================

//=====[Declaration and initialization of public global variables]=============

//=====[Declaration and initialization of private global variables]============

static bool gasDetected                  = OFF;
static bool overTemperatureDetected      = OFF;
static bool gasDetectorState             = OFF;
static bool overTemperatureDetectorState = OFF;

//=====[Declarations (prototypes) of private functions]========================

static void displayEventConfirmation(const char* eventType);
static void logToSdCard(const char* eventType, bool isManual = false);

//=====[Implementations of public functions]===================================

void fireAlarmInit()
{
    temperatureSensorInit();
    gasSensorInit();
    fireAlarmTestButton.mode(PullDown); 
    eventDisplayTimer.stop();
    eventDisplayTimer.reset();
    uart.baud(115200);
    
    sd.init();
    fs.mount(&sd);
    
        uart.write("Press 6 or 7 on the keypad to log a gas detection or overtemp detection event.\r\n", 78);
}

void fireAlarmUpdate()
{
    static bool prevGasState = OFF;
    static bool prevTempState = OFF;
    
    temperatureSensorUpdate();
    gasSensorUpdate();

    // Check for keypad presses
    char keyPressed = matrixKeypadUpdate();
    if (keyPressed == '6') {
        logToSdCard("Gas detection", true);
        displayEventConfirmation("GAS LOGGED");
    }
    else if (keyPressed == '7') {
        logToSdCard("High temperature", true);
        displayEventConfirmation("TEMP LOGGED");
    }

    // sensor detection and logging
    overTemperatureDetectorState = temperatureSensorReadCelsius() > TEMPERATURE_C_LIMIT_ALARM;
    if (overTemperatureDetectorState && !prevTempState) {
        overTemperatureDetected = ON;
        logToSdCard("High temperature");
        displayEventConfirmation("HIGH TEMP");
    }
    prevTempState = overTemperatureDetectorState;

    gasDetectorState = !gasSensorRead();
    if (gasDetectorState && !prevGasState) {
        gasDetected = ON;
        logToSdCard("Gas detection");
        displayEventConfirmation("GAS DETECTED");
    }
    prevGasState = gasDetectorState;

    if (fireAlarmTestButton) {             
        overTemperatureDetected = ON;
        gasDetected = ON;
        logToSdCard("System test alarm");
        displayEventConfirmation("TEST ALARM");
    }

    if (eventDisplayTimer.read_ms() >= EVENT_CONFIRMATION_DISPLAY_TIME_MS) {
        eventDisplayTimer.stop();
        eventDisplayTimer.reset();
        displayClear();
    }
}

// [Keep all existing state read/deactivate functions...]

//=====[Implementations of private functions]==================================

static void displayEventConfirmation(const char* eventType)
{
    displayModeWrite(DISPLAY_MODE_CHAR);
    displayClear();
    displayCharPositionWrite(0, 0);
    displayStringWrite("ALERT:");
    displayCharPositionWrite(0, 1);
    displayStringWrite(eventType);
    eventDisplayTimer.start();
}

static void logToSdCard(const char* eventType, bool isManual)
{
    time_t seconds = time(NULL);
    char timeStr[20];
    strftime(timeStr, sizeof(timeStr), "%Y-%m-%d %H:%M:%S", localtime(&seconds));
    
    FILE* file = fopen("/fs/events.log", "a");
    if (file != NULL) {
        fprintf(file, "[%s] %s - %s\n", 
               isManual ? "MANUAL" : "AUTO",
               timeStr, 
               eventType);
        fclose(file);
    }
}
    


